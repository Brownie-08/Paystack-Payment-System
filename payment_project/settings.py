"""
Django settings for payment_project project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-_)r2%ikc=k10t3b@3w6y*0@rre^x9val^eut@($uur83ytq(i=')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# ALLOWED_HOSTS configuration for Railway
RAILWAY_STATIC_URL = config('RAILWAY_STATIC_URL', default=None)
RAILWAY_PUBLIC_DOMAIN = config('RAILWAY_PUBLIC_DOMAIN', default=None)

allowed_hosts = ['localhost', '127.0.0.1', '0.0.0.0']

# Add Railway domains
if RAILWAY_STATIC_URL:
    allowed_hosts.append(RAILWAY_STATIC_URL.replace('https://', '').replace('http://', ''))
if RAILWAY_PUBLIC_DOMAIN:
    allowed_hosts.append(RAILWAY_PUBLIC_DOMAIN)

# Add wildcard Railway domains
allowed_hosts.extend([
    '*.railway.app',
    '*.up.railway.app',
    '.railway.app',
    '.up.railway.app'
])

# Add custom domains from environment
custom_hosts = config('ALLOWED_HOSTS', default='').split(',')
for host in custom_hosts:
    if host.strip():
        allowed_hosts.append(host.strip())

# Production Railway configuration
if config('RAILWAY_ENVIRONMENT', default=False):
    # Get the actual Railway domain from environment or use wildcard
    railway_domain = config('RAILWAY_STATIC_URL', default='').replace('https://', '').replace('http://', '')
    if railway_domain:
        ALLOWED_HOSTS = [railway_domain, '*.railway.app', '*.up.railway.app', 'localhost', '127.0.0.1']
    else:
        ALLOWED_HOSTS = ['*']  # Fallback to allow all
else:
    ALLOWED_HOSTS = allowed_hosts


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "rest_framework",
    "corsheaders",
    "drf_spectacular",
    # "django_ratelimit",  # Temporarily disabled - enable with Redis
    # Local apps
    "payments.apps.PaymentsConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "payment_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "payment_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Database configuration - Railway provides DATABASE_URL
import dj_database_url
import os

# Use Railway's DATABASE_URL if available, otherwise use local PostgreSQL or SQLite
DATABASE_URL = config('DATABASE_URL', default=None)

if DATABASE_URL:
    # Production: Use Railway's DATABASE_URL (PostgreSQL)
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
elif os.environ.get('RAILWAY_ENVIRONMENT'):
    # Railway environment but no DATABASE_URL yet (use SQLite temporarily)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    # Local development: Try PostgreSQL first, fallback to SQLite
    try:
        import psycopg2
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.postgresql",
                "NAME": config('DB_NAME', default='payment_db'),
                "USER": config('DB_USER', default='postgres'),
                "PASSWORD": config('DB_PASSWORD', default='9123721167'),
                "HOST": config('DB_HOST', default='localhost'),
                "PORT": config('DB_PORT', default='5432'),
            }
        }
    except ImportError:
        # Fallback to SQLite if psycopg2 is not available
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }

# SQLite configuration (backup for development)
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

# Local memory cache (for development - works without Redis)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "payment-cache",
    }
}

# Redis cache configuration (uncomment when Redis is installed)
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": config('REDIS_URL', default='redis://127.0.0.1:6379/1'),
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#     }
# }

# Rate limiting configuration (disabled for now - enable with Redis)
# RATELIMIT_USE_CACHE = 'default'


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}

# Spectacular settings for API documentation
SPECTACULAR_SETTINGS = {
    'TITLE': 'Payment API',
    'DESCRIPTION': 'Django Paystack Payment Integration API',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# CORS settings - Allow Railway domains
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://localhost:3000",
    "https://127.0.0.1:3000",
]

# Allow all origins in production if CORS_ALLOW_ALL_ORIGINS is set
if config('CORS_ALLOW_ALL_ORIGINS', default=False, cast=bool):
    CORS_ALLOW_ALL_ORIGINS = True
else:
    # Add Railway domains from environment
    railway_domains = config('RAILWAY_DOMAINS', default='').split(',')
    for domain in railway_domains:
        if domain.strip():
            CORS_ALLOWED_ORIGINS.extend([
                f"https://{domain.strip()}",
                f"http://{domain.strip()}",
            ])

CORS_ALLOW_CREDENTIALS = True

# CSRF Trusted Origins for Railway
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://localhost:8000",
    "https://127.0.0.1:8000",
]

# Add Railway domain to CSRF trusted origins
if config('RAILWAY_ENVIRONMENT', default=False):
    railway_url = config('RAILWAY_STATIC_URL', default='')
    if railway_url:
        CSRF_TRUSTED_ORIGINS.append(railway_url)
    
    # Also add the domain from ALLOWED_HOSTS
    for host in ALLOWED_HOSTS:
        if host and host != '*' and not host.startswith('*.') and not host.startswith('.'):
            CSRF_TRUSTED_ORIGINS.extend([
                f"https://{host}",
                f"http://{host}"
            ])

# Add custom trusted origins
custom_origins = config('CSRF_TRUSTED_ORIGINS', default='').split(',')
for origin in custom_origins:
    if origin.strip():
        CSRF_TRUSTED_ORIGINS.append(origin.strip())

# Paystack settings
PAYSTACK_SECRET_KEY = config('PAYSTACK_SECRET_KEY')
PAYSTACK_PUBLIC_KEY = config('PAYSTACK_PUBLIC_KEY')
PAYSTACK_BASE_URL = config('PAYSTACK_BASE_URL', default='https://api.paystack.co')

# Application URLs
FRONTEND_CALLBACK_URL = config('FRONTEND_CALLBACK_URL', default='http://localhost:3000/payment/callback')
BACKEND_WEBHOOK_URL = config('BACKEND_WEBHOOK_URL', default='http://localhost:8000/api/payments/webhook/')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'console_debug': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'payments.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'payments': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}

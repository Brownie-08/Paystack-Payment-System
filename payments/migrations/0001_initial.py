# Generated by Django 4.2.11 on 2025-09-22 02:49

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        help_text="Current payment status for the user",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
                "db_table": "payments_user_profile",
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        db_index=True,
                        help_text="Unique payment reference for idempotency",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount in kobo (Nigerian currency subunit)",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1.00"))
                        ],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="NGN", help_text="Payment currency code", max_length=3
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("success", "Success"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("abandoned", "Abandoned"),
                        ],
                        db_index=True,
                        default="pending",
                        help_text="Current payment status",
                        max_length=20,
                    ),
                ),
                (
                    "paystack_response",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Raw response data from Paystack API",
                    ),
                ),
                (
                    "authorization_url",
                    models.URLField(
                        blank=True,
                        help_text="Paystack checkout URL for the payment",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "access_code",
                    models.CharField(
                        blank=True,
                        help_text="Paystack access code for the transaction",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "webhook_received",
                    models.BooleanField(
                        default=False,
                        help_text="Whether webhook notification was received",
                    ),
                ),
                (
                    "webhook_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether payment was verified via Paystack API",
                    ),
                ),
                (
                    "customer_email",
                    models.EmailField(
                        help_text="Customer email address for the payment",
                        max_length=254,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional payment metadata",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="When the payment record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the payment record was last updated",
                    ),
                ),
                (
                    "paid_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the payment was completed",
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who initiated the payment",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment",
                "verbose_name_plural": "Payments",
                "db_table": "payments_payment",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["reference"], name="payments_pa_referen_75358f_idx"
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="payments_pa_status_343680_idx",
                    ),
                    models.Index(
                        fields=["user", "status"], name="payments_pa_user_id_01767a_idx"
                    ),
                    models.Index(
                        fields=["customer_email"], name="payments_pa_custome_3e0d7c_idx"
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="payment",
            constraint=models.UniqueConstraint(
                fields=("reference",), name="unique_payment_reference"
            ),
        ),
    ]
